# This template runs spinxsk.exe for a single architecture.

parameters:
  pool: ''
  image: ''
  arch: 'x64'
  config: 'Debug'
  ignoreFailures: false

jobs:
- job: spinxsk_${{ parameters.arch }}_${{ parameters.config }}_${{ replace(parameters.pool, '-', '_') }}${{ replace(parameters.image, '-', '_') }}
  displayName: spinxsk (${{ parameters.arch }}_${{ parameters.config }}) (${{ parameters.pool }}${{ parameters.image }})
  # Either run on our self-hosted 'pool' or an AZP managed 'image'.
  ${{ if ne(parameters.pool, '') }}:
    pool:
      name: ${{ parameters.pool }}
      ${{ if ne(parameters.image, '') }}:
        demands: ImageOverride -equals ${{ parameters.image }}
    workspace:
      clean: all
  ${{ if eq(parameters.pool, '') }}:
    pool:
      vmImage: ${{ parameters.image }}
  continueOnError: ${{ parameters.ignoreFailures }}
  variables:
  - name: runCodesignValidationInjection
    value: false
  steps:
  - checkout: self

  - task: PowerShell@2
    displayName: Check Drivers
    inputs:
      pwsh: true
      filePath: tools/check-drivers.ps1

  - task: PowerShell@2
    displayName: Prepare Machine
    inputs:
      pwsh: true
      filePath: tools/prepare-machine.ps1
      arguments: -ForTest -NoReboot

  - task: DownloadBuildArtifacts@0
    displayName: Download Artifacts
    inputs:
      artifactName: artifacts
      itemPattern: artifacts/bin/${{ parameters.arch }}_${{ parameters.config }}/**
      downloadPath: $(Build.SourcesDirectory)

  - task: PowerShell@2
    displayName: Start Logging
    inputs:
      pwsh: true
      filePath: tools/log.ps1
      arguments: -Start -Name spinxsk -Profile SpinXsk.Verbose -Verbose -Config ${{ parameters.config }} -Arch ${{ parameters.arch }}

  - task: PowerShell@2
    displayName: Start Profiling
    inputs:
      pwsh: true
      filePath: tools/log.ps1
      arguments: -Start -Name spinxskcpu -Profile CpuCswitchSample.Verbose -Verbose -Config ${{ parameters.config }} -Arch ${{ parameters.arch }}

  - task: PowerShell@2
    displayName: Install fndis
    timeoutInMinutes: 5
    inputs:
      pwsh: true
      filePath: tools/setup.ps1
      arguments: -Install fndis -Verbose -Config ${{ parameters.config }} -Arch ${{ parameters.arch }}

  - task: PowerShell@2
    displayName: Install xdp
    timeoutInMinutes: 5
    inputs:
      pwsh: true
      filePath: tools/setup.ps1
      arguments: -Install xdp -Verbose -Config ${{ parameters.config }} -Arch ${{ parameters.arch }}

  - task: PowerShell@2
    displayName: Install xdpmp
    timeoutInMinutes: 5
    inputs:
      pwsh: true
      filePath: tools/setup.ps1
      arguments: -Install xdpmp -Verbose -Config ${{ parameters.config }} -Arch ${{ parameters.arch }}

  - task: PowerShell@2
    displayName: Run spinxsk
    timeoutInMinutes: 15
    inputs:
      pwsh: true
      filePath: tools/spinxsk.ps1
      arguments: -Config ${{ parameters.config }} -Arch ${{ parameters.arch }} -QueueCount 2 -Minutes 10 -Verbose -Stats

  - task: PowerShell@2
    displayName: Uninstall xdpmp
    condition: always()
    timeoutInMinutes: 5
    inputs:
      pwsh: true
      filePath: tools/setup.ps1
      arguments: -Uninstall xdpmp -Verbose -Config ${{ parameters.config }} -Arch ${{ parameters.arch }}

  - task: PowerShell@2
    displayName: Uninstall xdp
    condition: always()
    timeoutInMinutes: 5
    inputs:
      pwsh: true
      filePath: tools/setup.ps1
      arguments: -Uninstall xdp -Verbose -Config ${{ parameters.config }} -Arch ${{ parameters.arch }}

  - task: PowerShell@2
    displayName: Uninstall fndis
    condition: always()
    timeoutInMinutes: 5
    inputs:
      pwsh: true
      filePath: tools/setup.ps1
      arguments: -Uninstall fndis -Verbose -Config ${{ parameters.config }} -Arch ${{ parameters.arch }}

  - task: PowerShell@2
    displayName: Stop Profiling
    condition: always()
    inputs:
      pwsh: true
      filePath: tools/log.ps1
      arguments: -Stop -Name spinxskcpu -Verbose -Config ${{ parameters.config }} -Arch ${{ parameters.arch }} -NoTextConversion

  - task: PowerShell@2
    displayName: Stop Logging
    condition: always()
    inputs:
      pwsh: true
      filePath: tools/log.ps1
      arguments: -Stop -Name spinxsk -Verbose -Config ${{ parameters.config }} -Arch ${{ parameters.arch }}

  - task: CopyFiles@2
    displayName: Stage Logs
    condition: always()
    inputs:
      sourceFolder: artifacts/logs
      contents: '**/!(*.ilk|*.exp|*.lastcodeanalysissucceeded)'
      targetFolder: $(Build.ArtifactStagingDirectory)/logs/${{ parameters.arch }}_${{ parameters.config }}_${{ parameters.pool }}${{ parameters.image }}

  - task: PublishBuildArtifacts@1
    displayName: Upload Logs
    condition: always()
    inputs:
      artifactName: artifacts
      pathToPublish: $(Build.ArtifactStagingDirectory)
      parallel: true

  - task: PowerShell@2
    displayName: Cleanup Machine
    condition: always()
    inputs:
      pwsh: true
      filePath: tools/prepare-machine.ps1
      arguments: -Cleanup -ForTest -NoReboot

  - task: PowerShell@2
    displayName: Reboot (if necessary)
    condition: and(always(), eq(variables['NeedsReboot'],'true'))
    inputs:
      pwsh: true
      targetType: inline
      script: shutdown.exe /f /r /t 0 /c 'XDP Pipeline' /d u:4:5

  - task: PowerShell@2
    displayName: Check Drivers
    condition: always()
    inputs:
      pwsh: true
      filePath: tools/check-drivers.ps1
