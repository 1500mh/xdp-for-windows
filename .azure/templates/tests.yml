# This template runs xdpfunctionaltests.dll for a single architecture.

parameters:
  pool: ''
  image: ''
  arch: 'x64'
  config: 'Debug'
  ignoreFailures: false
  osName:

jobs:
- job: tests_${{ parameters.arch }}_${{ parameters.config }}_${{ replace(parameters.pool, '-', '_') }}${{ replace(parameters.image, '-', '_') }}
  displayName: functional-${{ parameters.osName }}-${{ parameters.arch }}_${{ parameters.config }} (${{ parameters.pool }})
  # Either run on our self-hosted 'pool' or an AZP managed 'image'.
  ${{ if ne(parameters.pool, '') }}:
    pool:
      name: ${{ parameters.pool }}
      ${{ if ne(parameters.image, '') }}:
        demands: ImageOverride -equals ${{ parameters.image }}
    workspace:
      clean: all
  ${{ if eq(parameters.pool, '') }}:
    pool:
      vmImage: ${{ parameters.image }}
  continueOnError: ${{ parameters.ignoreFailures }}
  variables:
  - name: runCodesignValidationInjection
    value: false
  steps:
  - checkout: self

  - task: PowerShell@2
    displayName: Check Drivers
    inputs:
      pwsh: true
      filePath: tools/check-drivers.ps1

  - task: PowerShell@2
    displayName: Prepare Machine
    inputs:
      pwsh: true
      filePath: tools/prepare-machine.ps1
      arguments: -ForTest -NoReboot

  - task: DownloadBuildArtifacts@0
    displayName: Download Artifacts
    inputs:
      artifactName: artifacts
      itemPattern: artifacts/bin/${{ parameters.arch }}_${{ parameters.config }}/**
      downloadPath: $(Build.SourcesDirectory)

  - task: PowerShell@2
    displayName: Start Logging
    inputs:
      pwsh: true
      filePath: tools/log.ps1
      arguments: -Start -Name xdpfunc -Profile XdpFunctional.Verbose -Verbose -Config ${{ parameters.config }} -Arch ${{ parameters.arch }}

  - task: PowerShell@2
    displayName: Install xdp
    timeoutInMinutes: 5
    inputs:
      pwsh: true
      filePath: tools/setup.ps1
      arguments: -Install xdp -Verbose -Config ${{ parameters.config }} -Arch ${{ parameters.arch }}

  - task: PowerShell@2
    displayName: Install xdpfnmp
    timeoutInMinutes: 5
    inputs:
      pwsh: true
      filePath: tools/setup.ps1
      arguments: -Install xdpfnmp -Verbose -Config ${{ parameters.config }} -Arch ${{ parameters.arch }}

  - task: VSTest@2
    timeoutInMinutes: 10
    inputs:
        testSelector: testAssemblies
        testAssemblyVer2: artifacts/bin/${{ parameters.arch }}_${{ parameters.config }}/xdpfunctionaltests.dll

  - task: PowerShell@2
    displayName: Uninstall xdpfnmp
    condition: always()
    timeoutInMinutes: 5
    inputs:
      pwsh: true
      filePath: tools/setup.ps1
      arguments: -Uninstall xdpfnmp -Verbose -Config ${{ parameters.config }} -Arch ${{ parameters.arch }}

  - task: PowerShell@2
    displayName: Uninstall xdp
    condition: always()
    timeoutInMinutes: 5
    inputs:
      pwsh: true
      filePath: tools/setup.ps1
      arguments: -Uninstall xdp -Verbose -Config ${{ parameters.config }} -Arch ${{ parameters.arch }}

  - task: PowerShell@2
    displayName: Stop Logging
    condition: always()
    inputs:
      pwsh: true
      filePath: tools/log.ps1
      arguments: -Stop -Name xdpfunc -Verbose -Config ${{ parameters.config }} -Arch ${{ parameters.arch }}

  - task: CopyFiles@2
    displayName: Stage Logs
    condition: succeededOrFailed()
    inputs:
      sourceFolder: artifacts/logs
      contents: '**/!(*.ilk|*.exp|*.lastcodeanalysissucceeded)'
      targetFolder: $(Build.ArtifactStagingDirectory)/logs/${{ parameters.arch }}_${{ parameters.config }}_${{ parameters.pool }}${{ parameters.image }}

  - task: PublishBuildArtifacts@1
    displayName: Upload Logs
    condition: succeededOrFailed()
    inputs:
      artifactName: artifacts
      pathToPublish: $(Build.ArtifactStagingDirectory)
      parallel: true

  - task: PowerShell@2
    displayName: Cleanup Machine
    condition: always()
    inputs:
      pwsh: true
      filePath: tools/prepare-machine.ps1
      arguments: -Cleanup -ForTest -NoReboot

  - task: PowerShell@2
    displayName: Check Drivers
    condition: always()
    inputs:
      pwsh: true
      filePath: tools/check-drivers.ps1
